@startuml TravelAgentComplete完整事件交互流程

!theme plain
skinparam backgroundColor #FFFFFF
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 60

title TravelAgentComplete 完整事件交互流程图

participant "用户" as User
participant "前端应用" as Frontend
participant "SSE服务器" as Server
participant "TravelAgent" as Agent
participant "外部API" as API

== 初始化阶段 ==
User -> Frontend: 输入旅游需求
Frontend -> Server: POST /sse/travel-agent\n{scenario: 'complete', userRequest: {...}}
Server -> Agent: 创建 TravelAgentComplete 实例
Agent -> Agent: 生成 runId, threadId, messageId
Agent -> Agent: 初始化状态对象
Agent -> Server: RUN_STARTED 事件
Server -> Frontend: SSE: data: {"type": "RUN_STARTED", ...}
Frontend -> Frontend: 更新UI状态为"运行中"

== 需求分析阶段 ==
Agent -> Agent: 执行需求分析步骤
Agent -> Server: STEP_STARTED 事件
Server -> Frontend: SSE: data: {"type": "STEP_STARTED", "stepName": "需求分析"}

Agent -> Server: TEXT_MESSAGE_START 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_START", ...}

Agent -> Server: TEXT_MESSAGE_CHUNK 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "我正在分析您的旅游需求..."}
Frontend -> Frontend: 流式显示文本内容

Agent -> Agent: 分析用户需求
Agent -> Agent: 更新状态 (requirements)
Agent -> Server: STATE_DELTA 事件
Server -> Frontend: SSE: data: {"type": "STATE_DELTA", "delta": [...]}

Agent -> Server: TEXT_MESSAGE_END 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_END", ...}

Agent -> Server: STEP_FINISHED 事件
Server -> Frontend: SSE: data: {"type": "STEP_FINISHED", "stepName": "需求分析"}

== 景点查询阶段（包含工具调用）==
Agent -> Agent: 执行景点查询步骤
Agent -> Server: STEP_STARTED 事件
Server -> Frontend: SSE: data: {"type": "STEP_STARTED", "stepName": "景点查询"}

Agent -> Server: TEXT_MESSAGE_START 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_START", ...}

Agent -> Server: TEXT_MESSAGE_CHUNK 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "正在查询景点信息..."}

Agent -> Server: TOOL_CALL_START 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_START", "toolCallName": "get_attractions", ...}
Frontend -> Frontend: 显示工具调用状态

Agent -> Server: TOOL_CALL_ARGS 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_ARGS", "delta": '{"city": "北京", ...}'}

Agent -> API: 调用外部API
API --> Agent: 返回景点数据

Agent -> Server: TOOL_CALL_END 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_END", ...}

Agent -> Server: TOOL_CALL_RESULT 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_RESULT", "content": "[景点数据]", "role": "tool"}

Agent -> Agent: 更新状态 (attractions)
Agent -> Server: STATE_DELTA 事件
Server -> Frontend: SSE: data: {"type": "STATE_DELTA", "delta": [...]}

Agent -> Server: TEXT_MESSAGE_CHUNK 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "找到 3 个景点"}

Agent -> Server: TEXT_MESSAGE_END 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_END", ...}

Agent -> Server: STEP_FINISHED 事件
Server -> Frontend: SSE: data: {"type": "STEP_FINISHED", "stepName": "景点查询"}

== 天气查询阶段 ==
Agent -> Agent: 执行天气查询步骤
Agent -> Server: STEP_STARTED 事件
Server -> Frontend: SSE: data: {"type": "STEP_STARTED", "stepName": "天气查询"}

Agent -> Server: TOOL_CALL_START 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_START", "toolCallName": "get_weather", ...}

Agent -> API: 调用天气API
API --> Agent: 返回天气数据

Agent -> Server: TOOL_CALL_END 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_END", ...}

Agent -> Server: TOOL_CALL_RESULT 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_RESULT", "content": "[天气数据]", "role": "tool"}

Agent -> Agent: 更新状态 (weather)
Agent -> Server: STATE_DELTA 事件
Server -> Frontend: SSE: data: {"type": "STATE_DELTA", "delta": [...]}

Agent -> Server: STEP_FINISHED 事件
Server -> Frontend: SSE: data: {"type": "STEP_FINISHED", "stepName": "天气查询"}

== 路线规划阶段 ==
Agent -> Agent: 执行路线规划步骤
Agent -> Server: STEP_STARTED 事件
Server -> Frontend: SSE: data: {"type": "STEP_STARTED", "stepName": "路线规划"}

Agent -> Server: TEXT_MESSAGE_START 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_START", ...}

Agent -> Agent: 生成行程安排
Agent -> Agent: 更新状态 (currentItinerary)

loop 分块发送行程内容
    Agent -> Server: TEXT_MESSAGE_CHUNK 事件
    Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "**第1天行程：**"}
    Frontend -> Frontend: 流式显示行程内容
    
    Agent -> Server: TEXT_MESSAGE_CHUNK 事件
    Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "- 故宫博物院"}
    
    Agent -> Server: TEXT_MESSAGE_CHUNK 事件
    Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "- 天安门广场"}
end

Agent -> Server: STATE_DELTA 事件
Server -> Frontend: SSE: data: {"type": "STATE_DELTA", "delta": [...]}

Agent -> Server: TEXT_MESSAGE_END 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_END", ...}

Agent -> Server: STEP_FINISHED 事件
Server -> Frontend: SSE: data: {"type": "STEP_FINISHED", "stepName": "路线规划"}

== 预算计算阶段 ==
Agent -> Agent: 执行预算计算步骤
Agent -> Server: STEP_STARTED 事件
Server -> Frontend: SSE: data: {"type": "STEP_STARTED", "stepName": "预算计算"}

Agent -> Server: TOOL_CALL_START 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_START", "toolCallName": "calculate_budget", ...}

Agent -> API: 调用预算计算API
API --> Agent: 返回预算数据

Agent -> Server: TOOL_CALL_END 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_END", ...}

Agent -> Server: TOOL_CALL_RESULT 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_RESULT", "content": "[预算数据]", "role": "tool"}

Agent -> Agent: 更新状态 (budget)
Agent -> Server: STATE_DELTA 事件
Server -> Frontend: SSE: data: {"type": "STATE_DELTA", "delta": [...]}

Agent -> Server: STEP_FINISHED 事件
Server -> Frontend: SSE: data: {"type": "STEP_FINISHED", "stepName": "预算计算"}

== 用户交互阶段 ==
Agent -> Agent: 检查是否需要用户确认
alt 需要用户确认
    Agent -> Server: CUSTOM 事件 (input_request)
    Server -> Frontend: SSE: data: {"type": "CUSTOM", "name": "input_request", "value": {...}}
    Frontend -> Frontend: 显示用户选择界面
    
    Agent -> Server: CUSTOM 事件 (stream_pause)
    Server -> Frontend: SSE: data: {"type": "CUSTOM", "name": "stream_pause", "value": {...}}
    Frontend -> Frontend: 暂停事件流，等待用户输入
    
    Agent -> Agent: 更新状态 (pendingUserInput: true)
    Agent -> Server: STATE_DELTA 事件
    Server -> Frontend: SSE: data: {"type": "STATE_DELTA", "delta": [...]}
    
    note over Agent, Server: 流暂停，等待用户输入
end

== 用户输入继续处理 ==
User -> Frontend: 选择"确认并预订"
Frontend -> Server: POST /sse/travel-agent/continue\n{requestId: "...", userInput: "确认并预订"}

Server -> Agent: 获取存储的agent实例
Agent -> Server: CUSTOM 事件 (stream_resume)
Server -> Frontend: SSE: data: {"type": "CUSTOM", "name": "stream_resume", "value": {...}}

Agent -> Agent: 更新状态 (pendingUserInput: false)
Agent -> Server: STATE_DELTA 事件
Server -> Frontend: SSE: data: {"type": "STATE_DELTA", "delta": [...]}

Agent -> Agent: 执行预订确认步骤
Agent -> Server: STEP_STARTED 事件
Server -> Frontend: SSE: data: {"type": "STEP_STARTED", "stepName": "预订确认"}

Agent -> Server: TOOL_CALL_START 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_START", "toolCallName": "create_booking", ...}

Agent -> API: 调用预订API
API --> Agent: 返回预订结果

Agent -> Server: TOOL_CALL_END 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_END", ...}

Agent -> Server: TOOL_CALL_RESULT 事件
Server -> Frontend: SSE: data: {"type": "TOOL_CALL_RESULT", "content": "[预订结果]", "role": "tool"}

Agent -> Server: TEXT_MESSAGE_START 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_START", ...}

Agent -> Server: TEXT_MESSAGE_CHUNK 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "预订成功！您的行程已确认。"}

Agent -> Server: TEXT_MESSAGE_END 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_END", ...}

Agent -> Server: STEP_FINISHED 事件
Server -> Frontend: SSE: data: {"type": "STEP_FINISHED", "stepName": "预订确认"}

== 完成阶段 ==
Agent -> Agent: 执行行程总结步骤
Agent -> Server: STEP_STARTED 事件
Server -> Frontend: SSE: data: {"type": "STEP_STARTED", "stepName": "行程总结"}

Agent -> Server: TEXT_MESSAGE_START 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_START", ...}

loop 发送预算总结
    Agent -> Server: TEXT_MESSAGE_CHUNK 事件
    Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "**预算总结：**"}
    
    Agent -> Server: TEXT_MESSAGE_CHUNK 事件
    Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "- 景点门票：275元"}
    
    Agent -> Server: TEXT_MESSAGE_CHUNK 事件
    Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "- 住宿费用：600元"}
    
    Agent -> Server: TEXT_MESSAGE_CHUNK 事件
    Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "- **总计：1250元**"}
end

loop 发送温馨提示
    Agent -> Server: TEXT_MESSAGE_CHUNK 事件
    Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "**温馨提示：**"}
    
    Agent -> Server: TEXT_MESSAGE_CHUNK 事件
    Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_CHUNK", "delta": "1. 建议提前在网上预订故宫门票"}
end

Agent -> Server: TEXT_MESSAGE_END 事件
Server -> Frontend: SSE: data: {"type": "TEXT_MESSAGE_END", ...}

Agent -> Server: STEP_FINISHED 事件
Server -> Frontend: SSE: data: {"type": "STEP_FINISHED", "stepName": "行程总结"}

Agent -> Server: MESSAGES_SNAPSHOT 事件
Server -> Frontend: SSE: data: {"type": "MESSAGES_SNAPSHOT", "messages": [...]}

Agent -> Server: RUN_FINISHED 事件
Server -> Frontend: SSE: data: {"type": "RUN_FINISHED", "result": {...}}
Frontend -> Frontend: 更新UI状态为"完成"

@enduml 